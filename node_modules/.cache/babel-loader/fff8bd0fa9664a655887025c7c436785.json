{"ast":null,"code":"var _jsxFileName = \"/Users/christopherlee/Git/CS5610/cs5610-ma5/christopher--lee-ma5/src/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Grid() {\n  _s();\n\n  const [grid, setGrid] = useState([[0, 0], [0, 0]]);\n\n  const handleClick = (x, y) => {\n    let newGrid = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      let row = [];\n\n      for (let j = 0; j < grid.length; j++) {\n        if (i == x && j == y) {\n          if (grid[x][y] == 0) row.push(1);else {\n            row.push(0);\n          }\n        } else {\n          row.push(grid[i][j]);\n        }\n      }\n\n      newGrid.push(row);\n    }\n\n    setGrid(newGrid);\n  };\n\n  const [count, setCount] = useState(0);\n\n  function handleCount(x, y) {\n    if (grid[x][y] === 1) {\n      setCount(count - 1);\n    } else {\n      setCount(count + 1);\n    }\n  }\n\n  const renderSquare = (x, y) => {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      val: grid[x][y],\n      x: x,\n      y: y,\n      click: (a, b) => handleClick(a, b)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleCount(0, 0);\n        },\n        children: renderSquare(0, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleCount(0, 1);\n        },\n        children: renderSquare(0, 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleCount(1, 0);\n        },\n        children: renderSquare(1, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleCount(1, 1);\n        },\n        children: renderSquare(1, 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"5zOMUYzrxqcn8y2vY/h6mBGipgg=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/christopherlee/Git/CS5610/cs5610-ma5/christopher--lee-ma5/src/Grid.jsx"],"names":["React","useState","Square","Grid","grid","setGrid","handleClick","x","y","newGrid","i","length","row","j","push","count","setCount","handleCount","renderSquare","a","b"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Square from './Square';\n\nfunction Grid() {\n    const [grid, setGrid] = useState([\n        [0,0],\n        [0,0]\n    ])\n\n    \n    \n\n    const handleClick = (x, y) => {\n        let newGrid = []\n        for (let i = 0; i < grid.length; i++) {\n            let row = [];\n            for (let j = 0; j < grid.length; j++) {\n                if (i == x && j == y) {\n                    if(grid[x][y] == 0) row.push(1)\n                    else {\n                        row.push(0)\n                    }\n                } else {\n                    row.push(grid[i][j])\n                }\n            }\n            newGrid.push(row)\n        }\n        setGrid(newGrid)\n    }\n\n    const [count, setCount] = useState(0)\n    \n    function handleCount(x, y) {\n        if (grid[x][y] === 1) {\n            setCount(count - 1)\n        } else {\n            setCount(count + 1)\n        }\n    }\n\n    const renderSquare = (x, y) => {\n        return <Square val={grid[x][y]} x={x} y={y} click={(a,b) => handleClick(a,b)}>\n\n        </Square>\n    }\n\n    return (\n        <div>\n            {/* <div className=\"count\">Count: {count}</div>\n            <button onClick={handleCount(0,0)}>{renderSquare(0,0)}</button>\n            <button onClick={handleCount(0,1)}>{renderSquare(0,1)}</button>\n            <button onClick={handleCount(1,0)}>{renderSquare(1,0)}</button>\n            <button onClick={handleCount(1,1)}>{renderSquare(1,1)}</button> */}\n            <h1>\n                {count}\n            </h1>\n            <div className=\"grid\">\n            <div onClick={() => {handleCount(0,0)}}>{renderSquare(0,0)}</div>\n            <div onClick={() => {handleCount(0,1)}}>{renderSquare(0,1)}</div>\n            <div onClick={() => {handleCount(1,0)}}>{renderSquare(1,0)}</div>\n            <div onClick={() => {handleCount(1,1)}}>{renderSquare(1,1)}</div>\n            {/* {renderSquare(0,1)}\n            {renderSquare(1,0)}\n            {renderSquare(1,1)} */}\n            </div>\n        </div>\n    )\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}